//---------------------------------------------------------------------------//
// Copyright (c) 2018-2020 Mikhail Komarov <nemo@nil.foundation>
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------//

#define BOOST_TEST_MODULE chia_test

#include <unordered_map>

#include <nil/crypto3/vdf/chia.hpp>

#include <nil/crypto3/vdf/algorithm/compute.hpp>

#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#ifdef CRYPTO3_VDF_BOOST
#include <nil/crypto3/multiprecision/number.hpp>
#include <nil/crypto3/multiprecision/cpp_int.hpp>
#ifdef CRYPTO3_VDF_BOOST_GMP
#include <nil/crypto3/multiprecision/gmp.hpp>
#endif
#ifdef CRYPTO3_VDF_BOOST_TOMMATH
#include <nil/crypto3/multiprecision/tommath.hpp>
#endif
#endif

namespace std {
    template<>
    struct hash<std::pair<std::string, std::size_t>> {
        std::size_t operator()(const std::pair<std::string, std::size_t> &v) const {
            return std::hash<std::string>()(v.first) ^ std::hash<std::size_t>()(v.second);
        }
    };
}    // namespace std

using namespace nil::crypto3;

#ifdef CRYPTO3_VDF_BOOST
using namespace nil::crypto3::multiprecision;
#endif

constexpr static const std::size_t default_chia_itr = 2097152;

namespace boost {
    namespace test_tools {
        namespace tt_detail {
            template<template<typename, typename> class P, typename K, typename V>
            struct print_log_value<P<K, V>> {
                void operator()(std::ostream &, P<K, V> const &) {
                }
            };
        }    // namespace tt_detail
    }        // namespace test_tools
}    // namespace boost

const static std::unordered_map<std::pair<std::string, std::size_t>, std::pair<std::string, std::string>> valid_data = {
    {{"-0xaf0806241ecbc630fbbfd0c9d61c257c40a185e8cab313041cf029d6f070d58ecbc6c906df53ecf0dd4497b0753ccdbce2ebd9c80ae00"
      "32acce89096af642dd8c008403dd989ee5c1262545004fdcd7acf47908b983bc5fed17889030f0138e10787a8493e95ca86649ae8208e4a7"
      "0c05772e25f9ac901a399529de12910a7a2c3376292be9dba600fd89910aeccc14432b6e45c0456f41c177bb736915cad3332a74e25b3993"
      "f3e44728dc2bd13180132c5fb88f0490aeb96b2afca655c13dd9ab8874035e26dab16b6aad2d584a2d35ae0eaf00df4e94ab39fe8a3d5837"
      "dcab204c46d7a7b97b0c702d8be98c50e1bf8b649b5b6194fc3bae6180d2dd24d9f",
      default_chia_itr},
     {"4058840216390625348236888951985399465274946386770428088081786161884390651447939435318542654322912708574089647883"
      "6295760352154738946495111228464712903306216483312743302865073936934625736105583030543354392586509673984456117031"
      "219431664233368894677088599881720387019636755449707883353121221227678816099101338691",
      "-332301552554171553632834216641243882377825232856874732049582511340208180501531233555573983230808683401805007615"
      "5619624007458788410755251712391173752777931508017440134991426345237617528836100679237872654412348370732010220141"
      "0079633857204630912003531487225200469654084220982425147699047093657807167999111809449"}},
    {{"-0xd58a9b7f4878f6c08e0bd2e9753b6522dda51977f1473e410230625be937370e4d32cded21d313c6964b889a02529a0d75b521e332781"
      "2a86f847f3aeea4a5d0179c9289846f6fcdad09bc8e19f06ccc621fe49fe2fdd8e9f756b09a0c4c51996f2322671a4ebaf2f139a18c603e5"
      "e3dd82cb2a138d77b58b3ee0a9f7d30c8c3b12bbf999d3387f10f1f0e1aaff195ea0e285b2287422e2293c687285ae00464e652da00473ef"
      "1460480823e5e22250046ad3c2388bd248ff736152e1a5567d4a6eebe81b3fd02f100e76f279b7ebef79ae535172608575e4a142d56ed6b7"
      "4a89e417ddeacb1c24557578bcca40260b1d54f87d074bf100a9372c18904739af7",
      default_chia_itr},
     {"4737251869225328122848814370750691987495663128935537498509275507192655182644706676930550948593278055049961056414"
      "7982161122071952243591845825325872612642471437143956545850220126598941257990191795147819684525325421371467187781"
      "311057024098561447139422127610744122460481621116561722761353834567447100991555938596",
      "2483984631672898240595536063514990227523689742609360472597841075506988010038004866541837304041271651456932057552"
      "7539379593954707915754465797905580890971065716924294041591988330096997561989410473926489441593034839492045084102"
      "824600537091179065312167019733274679701208619714646021444282016622184170962017967181"}},
    {{"-0xe91e65b381f9df578fc31cf13f1ddd4800882b86b5ed34f8959350b70e0e89d018a75036737a1418e98eee2ff4ba1ff584e3cd6e3d700"
      "8f77d3e636b4295fa5e3ee1e0e9b75f9020ce282527c45a8aae0d959664bcb6205a6d9a3a6ed93347aaad3d517493aefd65715c1bb05b5b4"
      "bb902607d5b808575e251fa06e34c0abdfc017b82ce5faac445271eec71c8e0774f502b142eba2d03aa833cae8824bbf8072d13b6235414a"
      "30e5a4599a51f8729c352e1b99ac858380b3c1816473fa4fe1e92926298d2e2f794bb824fd944fc212bf94d64446760c2bd509e36aa7b2fd"
      "fc28d0c83ba53cb2c11f48f8c19010964f8f9ed5f3c51e490b03cbcb4e357eb108f",
      default_chia_itr},
     {"3263447733235907018853810078917847966782161253997011025182094237515567364749085068660571487210016615736102417511"
      "5765198014455324948040141555458331905244908175125423297319353992679095540007856205178167421617121140893709203203"
      "579932729978355695439660542739435475715235659326986892018091616310918103907523345785",
      "-225507213649403332440664485671586244899302857505841311355598309824811213693092242290406857990425423117694388353"
      "7799543686060516652607228974600198521435673175477414401084703644545849612566959252516691627478727875007757696130"
      "7700276447405574087466459257161957281206342516873891682071109770153260677291394993893"}},
    {{"-0x8a9cb0711e15088b305b599357285cd9b8ffae50102c893435cf693e2f5ec053b7d7e69c7cb8b1136d037af63e9277d104861228168a1"
      "35e87649673a99f1d0165719cb4d82b63cabd888df0361a950f59d89b55f3d2c2635aa7094f984e72f0b8ab87edc51618625df58f35ab08c"
      "f961d4850c0ee053204e22684f8413a1accad06f8c4351958b1bc9131e62219f295f310c1720acf9cb5b6b8d78c9c4f911cee196ca3b13a0"
      "00ba9ab6d0c1340b660e12640c962569dff3dae124f63d589379b3f4c3efe0f5bbd87166e079754fa75de92af0e7b9c910f821dd8ac9d4de"
      "6b679b202c220d877a5b34cd51df908cf537e8185d96e2cd147e973300eac62cda7",
      default_chia_itr},
     {"7061976997860847395848477214534996847531945378757668195364593398515668301891998669639340747834917877102266625412"
      "7465788684985061873528705638833324725559191552547350127701011052523606525613291074496609429096459583583437778778"
      "7362941409065136988582369031162043090931470436953641686146238385723564012350444964",
      "5326568591424490243876898084859731728693089106927590125347254651229204761656806790606158676894293782373052918831"
      "3274930749475789453862069104478978310470020587338796397657038881838600805267476040674125584121645671551877624420"
      "4648622154299485141090401344477966838987924453969157863291434832463433271442509715"}},
    {{"-0x9ea822d487595fb1ee8a7c97794dcd9310f4736304091d6f71538f02b44789e06b410ac2a049e2bc8a7a51858a5c2f474478e02792e12"
      "60194c21ba77d33a869175ada3364edaa3964a5e83e4b30f576042c38ad2905df79f07eafce3925b9fba8af82b5ecbdd7007c42e55b51c86"
      "b7c1f3253d3e10a035bfe05fcd4bb2be95a8c82f3c5c90943bcd89b043b7539b22888e524f20d8d88a5796d5e0d99454dfe218f15ee209d6"
      "39eee8309bd39c71b2cf790295b6d4c6debbbb4f84e883f049d6c5b89a5c2071ac239941ba7777c776f9c7d1cec0bcd5f6171f10e426a45f"
      "58a706a8cb9da028e6cd9642f0e25c73c9f49acc6f6b2c04cb580cfa23917eb194f",
      default_chia_itr},
     {"3511540871564712953223035235258566187050110720279477359933335607938074917513486891352444647634631754609002608816"
      "0086456118640453612301497304834500067495579240106812815085095408631451205083365570196196609352799331132127273130"
      "803472423232594216237836987061064944033165231094350208188785604270299798760207260893",
      "-516111504528583991275321391565914268984032608605308469531983486179759688617743959320015793838438261284661564208"
      "8873998414960459977781342473112671844787294847629891924706842192584201558207868283890224256821045234710190079543"
      "971290071670808526763939739381729466491460695988864311072325730200571189819343187983"}},
    {{"-0xcce03d4e076a6ea47396904c578b038deefe473681830d791fea13b107f3ab6fed3cee169f9307d461816cb253e094c80fe8881b24d91"
      "ec7389ab989adce28f74195ec8746e522038f0f10cd4d480a21f10083aae6eee3a886dd35843a23a7598dd6473edc3db2231332f38ed639a"
      "40b82b6f0673fbdaf237054645340835b022548cc966b982d1339ad265caa8c50c1443e57c6dce79e4e00da66cbdcb5b85298277028a19e8"
      "a598ae3384f88d71c80ea14d9b8106b429a92d9debc23bb7fb7e5e4b73b074549b05ee63f2328de1782e1bd836fcea347a3c7180682bbd7a"
      "8c1b3827b96324fcc5666496e3ac8a27d735569fb34ca8fc4cb62147aa92d729fbf",
      default_chia_itr},
     {"7627107806588229566177829828221522094816484325585086067754636927388202610905860967846698841484044540077829859384"
      "1950142906953417072124810175062138451074352702706220273410249147104742036109497492597309990494607384352152098797"
      "235597001964878470226746629976540522634839760330495575533653866686655101858699743671",
      "6551238360870936976334175647320794046717038844207033273888807787651897991885777464716440110642619686996572707514"
      "1243348558148637204912788947479032945603694997822805336768750730122368193391020968154243546017630287828456461050"
      "674599290049898868594695802204901782118489302174572752308060112365754127049932433705"}},
    {{"-0xa1bfe86246b1c71bd293c9fed00816312cb1624ca9cc62b318631edf789bf46e58f081302cd11f76517f0b989d8173201cf81bb380129"
      "dbcbf86fe7f50a12e7afbdb2334a9bd1d686dacbf60a2b01db5001d6ec4f9317bc8d94ba648b8f42b9dd37a41ae84cc8302cfde2a979fb5b"
      "ff7514137c4841a58fd33b5d017dc92ba8053ee77ce3b3c1e5bdd9367c89589c12644da04dfb75f464c0fc5c34e67ee6199a0f25450544fb"
      "8a509d98ee4bd75881f64b32a8bb41d96ca7b4ce07454a6c206b6ca3115c9b008d07a97b97f4354c0015ed89a51d579c36287c9de3d60a4b"
      "141d0002675038e172b20dd05ed4e21d3675d0e1d7fec6be6368710828ac8bc862f",
      default_chia_itr},
     {"6071570166911185752352170625102777889683184617031786841544259638350379162028627105666983157908373293195270703474"
      "6706771926867499484883765604182553981322157431810362018930793651173399124512446809631597381495967332648121890106"
      "367902895666980427766978849224162611885455482011159219689647283559377168417502629642",
      "-140501656248999741636922095622686304483374951661339470183361196923958426490770925219145649390060535868433267405"
      "5506500695747328895449042485461692279143836096454416167464511045270999569217766789540632501679640319265366492006"
      "7094963334186409250796513511853293771715679676388564306327512573679577677941064102951"}},
    {{"-0xaba1b5ed3c97df610586bb9ba72dec9f1fe644a6d6a93f10b8927742ab0134ab1db30814170454a951f79041d78c7f29b5f2f01693f33"
      "060fa05f1deae0cfd67c21872dbba19ee3ac122c527a3c57df8d3cd6e7ada17958e5bf7da5dd7d4f1f33b816bd71bdbc7a36e433f9d11d61"
      "ed6dc379e33699a09ce07696b6d4728e50f55f8faa11706cec8481351c759b1ba5a78d7b0af42fe8de1e870cb1a2016e1c7a01e0373abe97"
      "c1393cb8ca90a66bd804530ce8cff4b9a9f0ee8d1abcc30ded6904eb800feb99dc517cd62275410acfd48f46e467d9055da582adde1b32f5"
      "26cf0ca5a73e863618821c9bff5a9eb743eeab5e36f589aec40caca4130c915fd67",
      default_chia_itr},
     {"4957408207362190776618434457214325241498723288724212215356051609865179370946820009754734426425040531042885458025"
      "3453544650283983749027520934597153581234478120438502500784135333547112356523121918076044800284395291867561177104"
      "041698795834988270353192986295772789291801118363560350367665515124842801646511972998",
      "-962428540112466859741165930607798544643046130842109610459468514504931058799874061689742288972051740818288732143"
      "5764738262188674335232565200428561904371037293615189489309981467335551348084255398734798451519230129509325140282"
      "090102161553679162783012193448377609227300788307412262799255364742501272165896239875"}},
    {{"-0xbec9c2e7bc5edf1aef9cfd6affa51875c9d6a2219efcb96626900f363103993fe8c8ce7aea12e264c0b2c0701aedf6f41535cfccc70f9"
      "7fc18aa887d3e03e7014ec00abd8f1246307097a7c7c44b157f3684048ac240b581c1afddb2fc686091d6f0d974cd09934b856dfc719a0da"
      "4bbfb678f2ce9fb94c7de68d02beb710a93e95099d40dbd01a0161ca0080b41e1c1a48e24ab3e1c480cc65b414c9afb21bb1299f8498f3fc"
      "60413663d55206337fc85b11ee8ad43c7f194d1a3af0787f8ea5436d5b562ceaf0ad68454c724bdc6ba259c5511bc2931ef80ee202d7faa8"
      "2beb283c8693d1b568b20efcacb918361850c38caffab3f82556ea8ab32282edc57",
      default_chia_itr},
     {"6504058346319800301492800548004012340813160602472564275468640887158199615356835255077481375656217022098469333082"
      "2205273107519506080291950718581531339602106242230978779352232279769443052628974975849849395538142986765261869773"
      "365763056795896827042180886111659518547467004314085369585829976849018921498366149866",
      "-136367364826986303185934245295445700470435648337438446113439949801828022882597584131092242993277237088150393360"
      "7076674473970307257321609599097199510463718405687584176647506014715193327245688257116682236370880596247210921387"
      "6498815731388170839646922709882787970476976878578530323283978236893987464354431639321"}},
    {{"-0xba783185c96763bbaed6a84b064de277b30bbfe8cd123afcd1d758935c86bf5df853ab596d711c38e43cf95830bef954f0aaf6caffcf1"
      "ac7c0821cf24beb78bda6a716f06c15c56997be74a0bb2e021ccf19ba8918b268937ee8a7e9fa0baab6d5877639388bacf9b434db08fd9e8"
      "8c4dc92eab510755a465163f489c8e7d9bfb03108a3614db2ee77cd166bb636c129081925c4a1c1239ed42bf1218d69de11086e1e4302fe6"
      "9fbd5cc2ad0db103a372fdb2f5051d1b9e2af4f464ed06ad24c4266a7f54c981deca11462de3cec4b0334bdd56375a6f16e65965ab437552"
      "1a217ebf3b7719b42028ea14eb2cec77141c9979da02ec176209adc297ecbc6da7f",
      default_chia_itr},
     {"4455473426064127367630226015508800843265383014448594962194099431970203615530519573312150883933742405453491369008"
      "6972644572430008485842235612171597905528928736753840610852099011414520238654010536431819188532882372941956512549"
      "380400798637051260045335920689520134877514206109418939274173232184477571618042465102",
      "1248085945077201110374834869736679485489661143610879013215961957563981177468088282113834520689635582159613137622"
      "4667239090068854764402697577993798883418126330016003408793913938038503042668922726203110473508504567371406446629"
      "145023952480755111827972304129374979293570414961175165033259530736380285502565612969"}}};

BOOST_AUTO_TEST_SUITE(chia_vdf_test_suite)

#ifndef CRYPTO3_VDF_BOOST
BOOST_DATA_TEST_CASE(chia_vdf_test, boost::unit_test::data::make(valid_data), array_element) {
    mpz_t D, a, b;
    mpz_inits(D, a, b, NULL);
    mpz_set_str(D, array_element.first.first.c_str(), 0);
    mpz_set_str(a, array_element.second.first.c_str(), 0);
    mpz_set_str(b, array_element.second.second.c_str(), 0);

    vdf::compute<vdf::chia>(D, array_element.first.second, st);

    BOOST_CHECK(!mpz_cmp(a, st.form.a));
    BOOST_CHECK(!mpz_cmp(b, st.form.b));
}

#else

#ifdef CRYPTO3_VDF_BOOST_GMP
BOOST_DATA_TEST_CASE(chia_vdf_compute_gmp_int_test, boost::unit_test::data::make(valid_data), array_element) {
    vdf::compute<vdf::chia>(vdf::discriminant_input<vdf::chia>(gmp_int(array_element.first.first)),
                            array_element.first.second);
}
#endif

BOOST_DATA_TEST_CASE(chia_vdf_compute_cpp_int, boost::unit_test::data::make(valid_data), array_element) {
    typename vdf::chia::state_type<cpp_int> state;
    vdf::chia::make_state(state, cpp_int(array_element.first.first));
    vdf::compute<vdf::chia>(state, cpp_int(array_element.first.second));

    BOOST_CHECK_EQUAL(cpp_int(array_element.second.first), state.form.a);
    BOOST_CHECK_EQUAL(cpp_int(array_element.second.second), state.form.b);
}

#ifdef CRYPTO3_VDF_BOOST_TOMMATH
BOOST_DATA_TEST_CASE(chia_vdf_compute_tommath_int, boost::unit_test::data::make(valid_data), array_element) {
    vdf::compute<vdf::chia>(vdf::discriminant_input<vdf::chia>(tommath_int(array_element.first.first)),
                            array_element.first.second);
}
#endif
#endif

BOOST_AUTO_TEST_SUITE_END()
